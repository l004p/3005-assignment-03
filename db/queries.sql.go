// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStudent = `-- name: AddStudent :one
INSERT INTO students (
    first_name, last_name, email, enrollment_date
    ) VALUES
    ($1, $2, $3, $4)
    RETURNING student_id, first_name, last_name, email, enrollment_date
`

type AddStudentParams struct {
	FirstName      string
	LastName       string
	Email          string
	EnrollmentDate pgtype.Date
}

func (q *Queries) AddStudent(ctx context.Context, arg AddStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, addStudent,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.EnrollmentDate,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EnrollmentDate,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID int32) error {
	_, err := q.db.Exec(ctx, deleteStudent, studentID)
	return err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT student_id, first_name, last_name, email, enrollment_date
FROM students
`

func (q *Queries) GetAllStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EnrollmentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :exec
UPDATE students
SET email = $2
WHERE student_id = $1
`

type UpdateStudentParams struct {
	StudentID int32
	Email     string
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) error {
	_, err := q.db.Exec(ctx, updateStudent, arg.StudentID, arg.Email)
	return err
}
